function TradeProcess(AccountInfo)
global fid_log

%% log
[idate, itime] = GetDateTimeNum();
fprintf(fid_log, '--->>> %s_%s,\tBegin Checking Process.\n', num2str(idate), num2str(itime));

for i = 1:numAccount
    %% 配置文件中的账号的顺序可能并不等于其id的值，例如排在顺序第4个的账号，其id可能是6，虽然应该尽力避免顺序与id不符。
    j_id = str2double(AccountInfo{i}.ID);
    
    if strcmp(AccountInfo{i}.STATUS, 'on') %当前账号active
        
        %% process tmp holding to get current holding
        %统一命名为tmpHolding_20160331.*类似的，并放在TradeLogs/（各账号）/的目录下。
        ParseTmp2CurrHolding(AccountInfo, j_id);
        
        %% generate target holding
        % targetholding 统一放在TradeGoals/（各账号）/的目录下，统一用targetHolding_20160331.txt 文件
         [alpha_benchMoney,w_stockPrice] = GenerateTargetHolding(AccountInfo, j_id);
         [MkValue] = CheckDiff(AccountInfo, j_id,w_stockPrice);
         if isempty(alpha_benchMoney) || isempty(MkValue)
             continue;
         end
          fprintf(2, ' %25s:\t%20.4f%20.4f%20.4f\n', AccountInfo{j_id}.NAME, MkValue,alpha_benchMoney,abs(MkValue - alpha_benchMoney)/alpha_benchMoney);
%         if selectMoney(j_id) * usingMoney(j_id) * Share(j_id) * selectFS(j_id) * CAP(j_id) ~= 0
        % generate trade vol, and write vol into files for different client software
        % trade volume统一放在TradeGoals/（各账号）/的目录下，根据client的类型，来具体定制。            
            GenerateTradeVol(AccountInfo, j_id);
            %fprintf(2, ' %25s:\t%20d%20.4f%20d%20.4f%20.4f\n', AccountInfo{j_id}.NAME, selectMoney(j_id), usingMoney(j_id), Share(j_id), selectFS(j_id), CAP(j_id));
            [sell_size, buy_size] = CheckDiff(AccountInfo,j_id,w_stockPrice);
            fprintf(2, ' %25s:\t%20.4f%20.4f%20.4f\n', AccountInfo{j_id}.NAME, sell_size,buy_size,abs(sell_size+buy_size));
            if abs(sell_size+buy_size) < 0.01 *  usingMoney(j_id);
                fprintf(2, '--->>>  End checking .....OK!!!\n');
            else
                fprintf(2, '--->>>  End checking .....ERROR!!!\n');
            end
        else
            [idate, itime] = GetDateTimeNum();
            fprintf(2, '--->>> %s_%s,\tError when generating target holding. account = %s.\n', num2str(idate), num2str(itime), AccountInfo{j_id}.NAME);
            fprintf(fid_log, '--->>> %s_%s,\tError when generating target holding. account = %s.\n', AccountInfo{j_id}.NAME);
            fprintf(2, ' %25s:\t%20d%20.4f%20d%20.4f%20.4f\n', AccountInfo{j_id}.NAME, selectMoney(j_id), usingMoney(j_id), Share(j_id), selectFS(j_id), CAP(j_id));
        end
    end
end